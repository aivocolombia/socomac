# app/core/tools.py
from langchain.tools import tool
from app.data.questions import question_list
from app.db.respositories import get_db_connection
from app.db.mongo import MongoChatMessageHistory
from app.db.supabase import get_supabase_client

@tool
def limpiar_memoria(phone: str) -> str:
    """Limpia toda la memoria de conversaci√≥n de un usuario espec√≠fico usando su n√∫mero de tel√©fono. Esta herramienta borra todos los mensajes almacenados en MongoDB para el n√∫mero de tel√©fono proporcionado."""
    try:
        print(f"üßπ Iniciando limpieza de memoria para el tel√©fono: {phone}")
        
        memory = MongoChatMessageHistory(phone=phone)
        
        memory.clear()
        
        print(f"‚úÖ Memoria limpiada exitosamente para el tel√©fono: {phone}")
        return f"Memoria de conversaci√≥n limpiada exitosamente para el n√∫mero {phone}. La conversaci√≥n anterior ha sido borrada."
        
    except Exception as e:
        error_msg = f"Error al limpiar la memoria: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def nombre_cliente(nombre: str = "", offset: int = 0, limit: int = 10) -> str:
    """
    Devuelve una lista de clientes filtrados por nombre (opcional) con paginaci√≥n.
    La b√∫squeda es flexible y encuentra nombres similares.

    Args:
        nombre (str): Nombre o parte del nombre del cliente a buscar. Vac√≠o = todos.
        offset (int): Posici√≥n inicial de los resultados (para paginaci√≥n).
        limit (int): N√∫mero m√°ximo de resultados a devolver.

    Returns:
        str: Lista de clientes encontrados con informaci√≥n completa.
    """
    try:
        print(f"üë§ Buscando clientes con nombre: '{nombre}'")
        
        # (Opcional) l√≠mites sanos para evitar abusos
        if limit <= 0:
            limit = 10
        if limit > 100:
            limit = 100
        if offset < 0:
            offset = 0

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT DISTINCT
                c.id_client AS id,
                c.full_name AS nombre,
                c.company AS empresa,
                c.unique_id AS documento,
                c.address AS direccion,
                c.city AS ciudad,
                c.deparment AS departamento,
                c.phone AS telefono
            FROM public.clients c
            WHERE COALESCE(NULLIF(c.full_name, ''), '') <> ''
              AND (
                c.full_name ILIKE %s 
                OR c.company ILIKE %s 
                OR c.unique_id ILIKE %s
              )
            ORDER BY c.full_name
            OFFSET %s
            LIMIT %s
        """
        
        patron_busqueda = f"%{nombre}%" if nombre else "%%"

        cursor.execute(query, (patron_busqueda, patron_busqueda, patron_busqueda, offset, limit))
        resultados = cursor.fetchall()
        conn.close()

        if not resultados:
            return "No se encontraron clientes con los criterios especificados."

        # Si se busca un nombre espec√≠fico y hay pocos resultados, mostrar informaci√≥n detallada
        if nombre and len(resultados) <= 3:
            respuesta = []
            for id_cliente, nombre_cliente, empresa, documento, direccion, ciudad, departamento, telefono in resultados:
                # Formatear informaci√≥n de manera clara
                info_cliente = f"üÜî ID: {id_cliente} | üë§ Nombre: {nombre_cliente}"
                
                # Agregar informaci√≥n adicional si est√° disponible
                if empresa:
                    info_cliente += f" | üè¢ Empresa: {empresa}"
                if documento:
                    info_cliente += f" | üìÑ Documento: {documento}"
                if direccion:
                    info_cliente += f" | üìç Direcci√≥n: {direccion}"
                if ciudad:
                    info_cliente += f" | üèôÔ∏è Ciudad: {ciudad}"
                if departamento:
                    info_cliente += f" | üó∫Ô∏è Departamento: {departamento}"
                if telefono:
                    info_cliente += f" | üìû Tel√©fono: {telefono}"
                
                respuesta.append(info_cliente)
            
            if len(resultados) == 1:
                respuesta.insert(0, "‚úÖ Cliente encontrado:")
            else:
                respuesta.insert(0, f"üë• Se encontraron {len(resultados)} clientes similares:")
                
            print(f"‚úÖ Encontrados {len(resultados)} clientes")
            return "\n".join(respuesta)
        else:
            # Para b√∫squedas generales o muchos resultados, mostrar informaci√≥n b√°sica
            respuesta = []
            for id_cliente, nombre_cliente, empresa, documento, direccion, ciudad, departamento, telefono in resultados:
                # Formatear informaci√≥n b√°sica
                info_cliente = f"üÜî ID: {id_cliente} | üë§ Nombre: {nombre_cliente}"
                
                # Agregar informaci√≥n adicional si est√° disponible
                if empresa:
                    info_cliente += f" | üè¢ Empresa: {empresa}"
                if documento:
                    info_cliente += f" | üìÑ Documento: {documento}"
                if direccion:
                    info_cliente += f" | üìç Direcci√≥n: {direccion}"
                if ciudad:
                    info_cliente += f" | üèôÔ∏è Ciudad: {ciudad}"
                if departamento:
                    info_cliente += f" | üó∫Ô∏è Departamento: {departamento}"
                if telefono:
                    info_cliente += f" | üìû Tel√©fono: {telefono}"
                
                respuesta.append(info_cliente)

            print(f"‚úÖ Encontrados {len(resultados)} clientes")
            return "\n".join(respuesta)
        
    except Exception as e:
        error_msg = f"Error al consultar clientes: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"

@tool
def nombre_empresa(nombre: str = "", offset: int = 0, limit: int = 10) -> str:
    """
    Devuelve empresas (clients.company) filtradas por nombre con paginaci√≥n.

    Args:
        nombre (str): Parte del nombre de la empresa a buscar. Vac√≠o = todas.
        offset (int): Desplazamiento inicial (paginaci√≥n).
        limit (int): Cantidad de registros a devolver.

    Returns:
        str: Lista de empresas con ID y nombre.
    """
    try:
        print(f"üè¢ Buscando empresas con nombre: '{nombre}'")
        
        # (Opcional) l√≠mites sanos para evitar abusos
        if limit <= 0:
            limit = 10
        if limit > 100:
            limit = 100
        if offset < 0:
            offset = 0

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT DISTINCT
                c.id_client AS id,
                c.company   AS nombre
            FROM public.clients c
            WHERE COALESCE(NULLIF(c.company, ''), '') <> ''
              AND c.company ILIKE %s
            ORDER BY nombre
            OFFSET %s
            LIMIT %s
        """

        patron = f"%{nombre}%" if nombre else "%%"

        cursor.execute(query, (patron, offset, limit))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return "No se encontraron empresas con los criterios especificados."

        lines = [f"üÜî ID: {rid} | üè¢ Empresa: {rnom}" for rid, rnom in rows]
        print(f"‚úÖ Encontradas {len(rows)} empresas")
        return "\n".join(lines)
        
    except Exception as e:
        error_msg = f"Error al consultar empresas: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"

@tool
def planes_pago_pendientes_por_cliente(id_cliente: int) -> str:
    """
    Devuelve los planes de pago con estado 'Pendiente' asociados a un cliente.

    Args:
        id_cliente (int): ID del cliente.

    Returns:
        str: Lista de planes con campos clave o mensaje de no encontrados.
    """
    try:
        if not isinstance(id_cliente, int) or id_cliente <= 0:
            return "El ID de cliente debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                pp.id_payment_plan,
                pp.id_sales_orders,
                pp.num_installments,
                pp.total_amount,
                pp.status,
                pp.pending_amount,
                pp.type_payment_plan
            FROM public.payment_plan pp
            JOIN public.sales_orders so 
                ON so.id_sales_orders = pp.id_sales_orders
            WHERE so.id_client = %s
              AND pp.status = 'Pendiente'
            ORDER BY pp.created_at DESC;
        """

        cursor.execute(query, (id_cliente,))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return f"No se encontraron planes de pago pendientes para el cliente con ID {id_cliente}."

        # Formato de salida
        lines = []
        for rid_plan, rid_order, num_inst, total_amt, status, pending_amt, type_plan in rows:
            lines.append(
                f"üìã Plan: {rid_plan} | üõí Orden: {rid_order} | "
                f"Cuotas: {num_inst} | üí∞ Total: {total_amt} | "
                f"Estado: {status} | ‚è≥ Pendiente: {pending_amt} | "
                f"Tipo: {type_plan}"
            )

        return "\n".join(lines)

    except Exception as e:
        error_msg = f"Error al consultar planes de pago: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"

@tool
def montos_a_favor_por_cliente(id_cliente: int) -> str:
    """
    Devuelve los planes de pago 'Pagado' con monto pendiente mayor a 0,
    es decir, montos a favor de un cliente.

    Args:
        id_cliente (int): ID del cliente.

    Returns:
        str: Lista de planes con montos a favor o mensaje de no encontrados.
    """
    try:
        if not isinstance(id_cliente, int) or id_cliente <= 0:
            return "El ID de cliente debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                pp.id_payment_plan,
                pp.id_sales_orders,
                pp.pending_amount
            FROM public.payment_plan pp
            JOIN public.sales_orders so 
                ON so.id_sales_orders = pp.id_sales_orders
            WHERE so.id_client = %s
              AND pp.status = 'Pagado'
              AND pp.pending_amount > 0
            ORDER BY pp.created_at DESC;
        """

        cursor.execute(query, (id_cliente,))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return f"No se encontraron montos a favor para el cliente con ID {id_cliente}."

        # Formato de salida
        lines = []
        for rid_plan, rid_order, pending_amt in rows:
            lines.append(
                f"üìã Plan: {rid_plan} | üõí Orden: {rid_order} | üíµ Monto a favor: {pending_amt}"
            )

        return "\n".join(lines)

    except Exception as e:
        error_msg = f"Error al consultar montos a favor: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"

@tool
def cuotas_pendientes_por_plan(id_payment_plan: int) -> str:
    """
    Devuelve las cuotas pendientes de un plan de pago espec√≠fico.

    Args:
        id_payment_plan (int): ID del plan de pago.

    Returns:
        str: Lista de cuotas pendientes con detalles o mensaje de no encontradas.
    """
    try:
        if not isinstance(id_payment_plan, int) or id_payment_plan <= 0:
            return "El ID del plan de pago debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                pi.installment_number,
                pi.id_payment_installment,
                pi.id_payment_plan,
                pi.amount,
                COALESCE(pi.pay_amount, 0),
                TO_CHAR(pi.due_date, 'DD/MM/YYYY'),
                pi.status
            FROM public.payment_installment AS pi
            WHERE pi.id_payment_plan = %s
              AND pi.status = 'Pendiente'
            ORDER BY pi.installment_number ASC;
        """
        cursor.execute(query, (id_payment_plan,))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return f"No se encontraron cuotas pendientes para el plan {id_payment_plan}."

        # mapa global para convertir n√∫mero mostrado ‚Üí id real
        global cuotas_map
        cuotas_map = {}

        lines = []
        for num_installment, id_real, id_plan, amount, pay_amount, due_date, status in rows:
            cuotas_map[num_installment] = {
                "id_payment_installment": id_real,
                "id_payment_plan": id_plan
            }
            lines.append(
                f"Nro: {num_installment} | üÜî ID real (id_payment_installment): {id_real} "
                f"| ü™ô ID plan: {id_plan} | üí∞ Monto total: {amount} | "
                f"üíµ Pagado: {pay_amount} | üìÖ Vence: {due_date} | Estado: {status}"
            )

        return "\n".join(lines)

    except Exception as e:
        error_msg = f"‚ùå Error al consultar cuotas pendientes: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

from decimal import Decimal
from datetime import datetime, timedelta

@tool
def consultar_productos(nombre: str = "", offset: int = 0, limit: int = 10) -> str:
    """
    Devuelve una lista de productos filtrados por nombre (opcional) con paginaci√≥n.

    Args:
        nombre (str): Nombre o parte del nombre del producto a buscar. Puede estar vac√≠o para traer todos.
        offset (int): Posici√≥n inicial de los resultados (para paginaci√≥n).
        limit (int): N√∫mero m√°ximo de resultados a devolver.

    Returns:
        str: Lista de productos encontrados con su ID, nombre, descripci√≥n y categor√≠a.
    """
    try:
        print(f"üîç Buscando productos con nombre: '{nombre}'")
        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                p.id_product,
                p.name_product,
                p.description,
                p.id_category,
                c.name_category AS category_name
            FROM 
                public.products p
            LEFT JOIN 
                public.category c
            ON 
                p.id_category = c.id_category
            WHERE p.name_product ILIKE %s
            ORDER BY p.name_product
            OFFSET %s
            LIMIT %s
        """
        
        patron_busqueda = f"%{nombre}%" if nombre else "%%"

        cursor.execute(query, (patron_busqueda, offset, limit))
        resultados = cursor.fetchall()
        conn.close()

        if not resultados:
            return "No se encontraron productos con los criterios especificados."

        respuesta = []
        for id_producto, nombre_producto, descripcion, id_categoria, nombre_categoria in resultados:
            categoria = nombre_categoria if nombre_categoria else "Sin categor√≠a"
            respuesta.append(f"üÜî ID: {id_producto} | üì¶ Producto: {nombre_producto} | üìù Descripci√≥n: {descripcion} | üè∑Ô∏è Categor√≠a: {categoria}")

        print(f"‚úÖ Encontrados {len(resultados)} productos")
        return "\n".join(respuesta)
        
    except Exception as e:
        error_msg = f"Error al consultar productos: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"

@tool
def obtener_id_sales_orders_por_plan(id_payment_plan: int) -> str:
    """
    Obtiene el id_sales_orders asociado a un plan de pago espec√≠fico.

    Args:
        id_payment_plan (int): ID del plan de pago.

    Returns:
        str: El id_sales_orders asociado al plan o mensaje de error.
    """
    try:
        if not isinstance(id_payment_plan, int) or id_payment_plan <= 0:
            return "El ID del plan de pago debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT id_sales_orders
            FROM public.payment_plan
            WHERE id_payment_plan = %s;
        """
        cursor.execute(query, (id_payment_plan,))
        result = cursor.fetchone()
        conn.close()

        if not result:
            return f"No se encontr√≥ el plan de pago con ID {id_payment_plan}."

        id_sales_orders = result[0]
        return f"ID de orden de venta: {id_sales_orders}"

    except Exception as e:
        error_msg = f"‚ùå Error al obtener id_sales_orders: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def obtener_id_client_por_orden(id_sales_orders: int) -> str:
    """
    Obtiene el id_client asociado a una orden de venta espec√≠fica.

    Args:
        id_sales_orders (int): ID de la orden de venta.

    Returns:
        str: El id_client asociado a la orden o mensaje de error.
    """
    try:
        if not isinstance(id_sales_orders, int) or id_sales_orders <= 0:
            return "El ID de la orden de venta debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT id_client
            FROM public.sales_orders
            WHERE id_sales_orders = %s;
        """
        cursor.execute(query, (id_sales_orders,))
        result = cursor.fetchone()
        conn.close()

        if not result:
            return f"No se encontr√≥ la orden de venta con ID {id_sales_orders}."

        id_client = result[0]
        return f"ID de cliente: {id_client}"

    except Exception as e:
        error_msg = f"‚ùå Error al obtener id_client: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def registrar_pago(
    id_sales_orders: int,
    id_payment_installment: int,
    amount: float,
    metodo_pago: str,
    id_client: int,
    proof_number: str = None,
    emission_bank: str = None,
    emission_date: str = None,
    destiny_bank: str = None,
    observations: str = None,
    cheque_number: str = None,
    bank: str = None,
    emision_date: str = None,
    stimate_collection_date: str = None,
    cheque_value: float = None
) -> str:
    """
    Registra un pago en la base de datos. 
    Dependiendo del m√©todo, inserta en payments y en la tabla correspondiente:
    - Efectivo ‚Üí payments
    - Transferencia ‚Üí payments + transfers (trans_value = amount, destino validado)
    - Cheque ‚Üí payments + cheques (amount = cheque_value)
    Actualiza el acumulado pagado en la cuota.
    
         Args:
         id_sales_orders (int): ID de la orden de venta
         id_payment_installment (int): ID de la cuota de pago
         amount (float): Monto del pago
         metodo_pago (str): M√©todo de pago (efectivo, transferencia, cheque)
         id_client (int): ID del cliente
         proof_number (str, optional): N√∫mero de comprobante para transferencias
         emission_bank (str, optional): Banco de emisi√≥n para transferencias
         emission_date (str, optional): Fecha de emisi√≥n para transferencias
         destiny_bank (str, optional): Banco de destino para transferencias
         observations (str, optional): Observaciones adicionales
         cheque_number (str, optional): N√∫mero de cheque
         bank (str, optional): Banco del cheque
         emision_date (str, optional): Fecha de emisi√≥n del cheque
         stimate_collection_date (str, optional): Fecha estimada de cobro del cheque
         cheque_value (float, optional): Valor del cheque
    """
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        metodo_pago = metodo_pago.strip().lower()

        # === Normalizar y validar destino en transferencias ===
        if metodo_pago == "transferencia":
            # Solo validar banco de destino (destiny_bank)
            bancos_validos = {
                "bancolombia": "Bancolombia",
                "davivienda": "Davivienda"
            }
            if not destiny_bank:
                return "‚ùå Debes indicar el banco destino."
            destiny_bank_normalizado = destiny_bank.strip().lower()
            if destiny_bank_normalizado not in bancos_validos:
                return "‚ùå Banco destino inv√°lido. Solo se permite 'Bancolombia' o 'Davivienda'."
            destiny_bank = bancos_validos[destiny_bank_normalizado]
            # El banco de emisi√≥n (emission_bank) puede ser cualquier banco, no se valida
            trans_value = amount  # Copiar autom√°ticamente

        # === Ajustar amount en caso de cheque ===
        if metodo_pago == "cheque":
            if cheque_value is None:
                return "‚ùå Debes indicar el valor del cheque."
            amount = cheque_value

        # === Determinar valor de caja_receipt ===
        caja_receipt = 'Yes' if metodo_pago == "efectivo" else None
        
        # === Insertar en payments ===
        cursor.execute("""
            INSERT INTO payments (id_sales_orders, id_payment_installment, amount, payment_method, payment_date, destiny_bank, caja_receipt, id_client)
            VALUES (%s, %s, %s, %s, CURRENT_DATE, %s, %s, %s)
            RETURNING id_payment;
        """, (
            id_sales_orders, id_payment_installment, amount, metodo_pago.capitalize(), destiny_bank, caja_receipt, id_client
        ))
        id_payment = cursor.fetchone()[0]

        # === Insertar en tabla espec√≠fica seg√∫n m√©todo ===
        if metodo_pago == "transferencia":
            cursor.execute("""
                INSERT INTO transfers (id_payment, proof_number, emission_bank, emission_date, trans_value, destiny_bank, observations)
                VALUES (%s, %s, %s, %s, %s, %s, %s);
            """, (
                id_payment, proof_number, emission_bank, emission_date, trans_value, destiny_bank, observations
            ))

        elif metodo_pago == "cheque":
            cursor.execute("""
                INSERT INTO cheques (id_payment, cheque_number, bank, emision_date, stimate_collection_date, cheque_value, observations)
                VALUES (%s, %s, %s, %s, %s, %s, %s);
            """, (
                id_payment, cheque_number, bank, emision_date, stimate_collection_date, cheque_value, observations
            ))

        # === Actualizar pay_amount en la cuota ===
        cursor.execute("""
            UPDATE payment_installment
            SET pay_amount = COALESCE(pay_amount, 0) + %s
            WHERE id_payment_installment = %s
            RETURNING pay_amount;
        """, (amount, id_payment_installment))
        
        nuevo_acumulado = cursor.fetchone()[0]

        conn.commit()
        conn.close()

        return (
            f"‚úÖ Pago registrado correctamente.\n"
            f"ID Payment: {id_payment}\n"
            f"Nuevo acumulado en la cuota: {nuevo_acumulado}"
        )

    except Exception as e:
        error_msg = f"‚ùå Error al registrar el pago: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def crear_orden_venta(
    id_client: int,
    id_classification: int,
    total: float,
    discount: float = 0.0,
    order_date: str = None
) -> str:
    """
    Crea una nueva orden de venta en la base de datos.

    Args:
        id_client (int): ID del cliente
        id_classification (int): ID de la clasificaci√≥n
        total (float): Total de la orden
        discount (float, optional): Descuento aplicado. Default 0.0
        order_date (str, optional): Fecha de la orden en formato YYYY-MM-DD. Si no se proporciona, usa CURRENT_DATE

    Returns:
        str: ID de la orden creada o mensaje de error
    """
    try:
        if not isinstance(id_client, int) or id_client <= 0:
            return "‚ùå El ID del cliente debe ser un n√∫mero entero positivo."
        
        if not isinstance(id_classification, int) or id_classification <= 0:
            return "‚ùå El ID de clasificaci√≥n debe ser un n√∫mero entero positivo."
        
        if not isinstance(total, (int, float)) or total <= 0:
            return "‚ùå El total debe ser un n√∫mero mayor que 0."
        
        if not isinstance(discount, (int, float)) or discount < 0:
            return "‚ùå El descuento debe ser un n√∫mero mayor o igual a 0."

        conn = get_db_connection()
        cursor = conn.cursor()

        # Si no se proporciona fecha, usar CURRENT_DATE
        if not order_date:
            order_date = "CURRENT_DATE"
            query = """
                INSERT INTO sales_orders (
                    id_client,
                    id_classification,
                    order_date,
                    total,
                    discount
                )
                VALUES (
                    %s, %s, CURRENT_DATE, %s, %s
                )
                RETURNING id_sales_orders;
            """
            cursor.execute(query, (id_client, id_classification, total, discount))
        else:
            query = """
                INSERT INTO sales_orders (
                    id_client,
                    id_classification,
                    order_date,
                    total,
                    discount
                )
                VALUES (
                    %s, %s, %s, %s, %s
                )
                RETURNING id_sales_orders;
            """
            cursor.execute(query, (id_client, id_classification, order_date, total, discount))

        id_sales_orders = cursor.fetchone()[0]
        conn.commit()
        conn.close()

        return f"‚úÖ Orden de venta creada exitosamente.\nüÜî ID de la orden: {id_sales_orders}"

    except Exception as e:
        error_msg = f"‚ùå Error al crear la orden de venta: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def registrar_pago_directo_orden(
    id_sales_orders: int,
    amount: float,
    metodo_pago: str,
    id_client: int,
    proof_number: str = None,
    emission_bank: str = None,
    emission_date: str = None,
    destiny_bank: str = None,
    observations: str = None,
    cheque_number: str = None,
    bank: str = None,
    emision_date: str = None,
    stimate_collection_date: str = None,
    cheque_value: float = None
) -> str:
    """
    Registra un pago directo a una orden de venta (sin payment_plan).
    Este pago se registra solo en la tabla payments con id_payment_installment = NULL.
    
         Args:
         id_sales_orders (int): ID de la orden de venta
         amount (float): Monto del pago
         metodo_pago (str): M√©todo de pago (efectivo, transferencia, cheque)
         id_client (int): ID del cliente
         proof_number (str, optional): N√∫mero de comprobante para transferencias
         emission_bank (str, optional): Banco de emisi√≥n para transferencias
         emission_date (str, optional): Fecha de emisi√≥n para transferencias
         destiny_bank (str, optional): Banco de destino para transferencias
         observations (str, optional): Observaciones adicionales
         cheque_number (str, optional): N√∫mero de cheque
         bank (str, optional): Banco del cheque
         emision_date (str, optional): Fecha de emisi√≥n del cheque
         stimate_collection_date (str, optional): Fecha estimada de cobro del cheque
         cheque_value (float, optional): Valor del cheque
    """
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        metodo_pago = metodo_pago.strip().lower()

        # === Normalizar y validar destino en transferencias ===
        if metodo_pago == "transferencia":
            # Solo validar banco de destino (destiny_bank)
            bancos_validos = {
                "bancolombia": "Bancolombia",
                "davivienda": "Davivienda"
            }
            if not destiny_bank:
                return "‚ùå Debes indicar el banco destino."
            destiny_bank_normalizado = destiny_bank.strip().lower()
            if destiny_bank_normalizado not in bancos_validos:
                return "‚ùå Banco destino inv√°lido. Solo se permite 'Bancolombia' o 'Davivienda'."
            destiny_bank = bancos_validos[destiny_bank_normalizado]
            trans_value = amount  # Copiar autom√°ticamente

        # === Ajustar amount en caso de cheque ===
        if metodo_pago == "cheque":
            if cheque_value is None:
                return "‚ùå Debes indicar el valor del cheque."
            amount = cheque_value

        # === Determinar valor de caja_receipt ===
        caja_receipt = 'Yes' if metodo_pago == "efectivo" else None
        
        # === Insertar en payments con id_payment_installment = NULL ===
        cursor.execute("""
            INSERT INTO payments (id_sales_orders, id_payment_installment, amount, payment_method, payment_date, destiny_bank, caja_receipt, id_client)
            VALUES (%s, NULL, %s, %s, CURRENT_DATE, %s, %s, %s)
            RETURNING id_payment;
        """, (
            id_sales_orders, amount, metodo_pago.capitalize(), destiny_bank, caja_receipt, id_client
        ))
        id_payment = cursor.fetchone()[0]

        # === Insertar en tabla espec√≠fica seg√∫n m√©todo ===
        if metodo_pago == "transferencia":
            cursor.execute("""
                INSERT INTO transfers (id_payment, proof_number, emission_bank, emission_date, trans_value, destiny_bank, observations)
                VALUES (%s, %s, %s, %s, %s, %s, %s);
            """, (
                id_payment, proof_number, emission_bank, emission_date, trans_value, destiny_bank, observations
            ))

        elif metodo_pago == "cheque":
            cursor.execute("""
                INSERT INTO cheques (id_payment, cheque_number, bank, emision_date, stimate_collection_date, cheque_value, observations)
                VALUES (%s, %s, %s, %s, %s, %s, %s);
            """, (
                id_payment, cheque_number, bank, emision_date, stimate_collection_date, cheque_value, observations
            ))

        conn.commit()
        conn.close()

        return (
            f"‚úÖ Pago directo registrado correctamente a la orden {id_sales_orders}.\n"
            f"ID Payment: {id_payment}\n"
            f"Monto: {amount}"
        )

    except Exception as e:
        error_msg = f"‚ùå Error al registrar el pago directo: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def agregar_detalle_orden_venta(
    id_sales_orders: int,
    id_product: int,
    quantity: int,
    unit_price: float
) -> str:
    """
    Agrega un detalle (producto) a una orden de venta existente.

    Args:
        id_sales_orders (int): ID de la orden de venta
        id_product (int): ID del producto
        quantity (int): Cantidad del producto
        unit_price (float): Precio unitario del producto

    Returns:
        str: Confirmaci√≥n de la operaci√≥n o mensaje de error
    """
    try:
        if not isinstance(id_sales_orders, int) or id_sales_orders <= 0:
            return "‚ùå El ID de la orden de venta debe ser un n√∫mero entero positivo."
        
        if not isinstance(id_product, int) or id_product <= 0:
            return "‚ùå El ID del producto debe ser un n√∫mero entero positivo."
        
        if not isinstance(quantity, int) or quantity <= 0:
            return "‚ùå La cantidad debe ser un n√∫mero entero positivo."
        
        if not isinstance(unit_price, (int, float)) or unit_price <= 0:
            return "‚ùå El precio unitario debe ser un n√∫mero mayor que 0."

        # Calcular subtotal
        subtotal = quantity * unit_price

        conn = get_db_connection()
        cursor = conn.cursor()

        # Verificar que la orden de venta existe
        cursor.execute("SELECT id_sales_orders FROM sales_orders WHERE id_sales_orders = %s", (id_sales_orders,))
        if not cursor.fetchone():
            conn.close()
            return f"‚ùå No se encontr√≥ la orden de venta con ID {id_sales_orders}."

        # Verificar que el producto existe
        cursor.execute("SELECT name_product FROM products WHERE id_product = %s", (id_product,))
        producto = cursor.fetchone()
        if not producto:
            conn.close()
            return f"‚ùå No se encontr√≥ el producto con ID {id_product}."

        # Insertar el detalle
        query = """
            INSERT INTO sales_order_details (
                id_sales_orders,
                id_product,
                quantity,
                unit_price,
                subtotal
            )
            VALUES (
                %s, %s, %s, %s, %s
            )
            RETURNING id_sales_order_detail;
        """
        cursor.execute(query, (id_sales_orders, id_product, quantity, unit_price, subtotal))
        id_sales_order_detail = cursor.fetchone()[0]

        conn.commit()
        conn.close()

        return f"‚úÖ Detalle agregado exitosamente a la orden {id_sales_orders}.\nüì¶ Producto: {producto[0]}\nüìä Cantidad: {quantity}\nüí∞ Precio unitario: {unit_price}\nüíµ Subtotal: {subtotal}\nüÜî ID del detalle: {id_sales_order_detail}"

    except Exception as e:
        error_msg = f"‚ùå Error al agregar el detalle a la orden: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def buscar_producto_por_nombre(nombre_producto: str) -> str:
    """
    Busca un producto espec√≠fico por nombre y devuelve su informaci√≥n completa.
    Esta herramienta es √∫til para obtener el ID correcto de un producto antes de crear sales_order_details.

    Args:
        nombre_producto (str): Nombre del producto a buscar (b√∫squeda flexible)

    Returns:
        str: Informaci√≥n completa del producto encontrado o mensaje de error
    """
    try:
        if not nombre_producto or not nombre_producto.strip():
            return "‚ùå Debes proporcionar el nombre del producto a buscar."

        print(f"üîç Buscando producto espec√≠fico: '{nombre_producto}'")
        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                p.id_product,
                p.name_product,
                p.description,
                p.id_category,
                c.name_category AS category_name
            FROM 
                public.products p
            LEFT JOIN 
                public.category c ON p.id_category = c.id_category
            WHERE p.name_product ILIKE %s
            ORDER BY p.name_product
            LIMIT 5
        """
        
        patron_busqueda = f"%{nombre_producto.strip()}%"
        cursor.execute(query, (patron_busqueda,))
        resultados = cursor.fetchall()
        conn.close()

        if not resultados:
            return f"‚ùå No se encontr√≥ ning√∫n producto con el nombre '{nombre_producto}'."

        if len(resultados) == 1:
            # Producto √∫nico encontrado
            id_producto, nombre_producto, descripcion, id_categoria, nombre_categoria = resultados[0]
            categoria = nombre_categoria if nombre_categoria else "Sin categor√≠a"
            return (
                f"‚úÖ Producto encontrado:\n"
                f"üÜî ID: {id_producto}\n"
                f"üì¶ Nombre: {nombre_producto}\n"
                f"üìù Descripci√≥n: {descripcion}\n"
                f"üè∑Ô∏è Categor√≠a: {categoria}"
            )
        else:
            # M√∫ltiples productos encontrados
            respuesta = [f"üîç Se encontraron {len(resultados)} productos similares a '{nombre_producto}':"]
            for id_producto, nombre_producto, descripcion, id_categoria, nombre_categoria in resultados:
                categoria = nombre_categoria if nombre_categoria else "Sin categor√≠a"
                respuesta.append(
                    f"üÜî ID: {id_producto} | üì¶ {nombre_producto} | üìù {descripcion} | üè∑Ô∏è {categoria}"
                )
            respuesta.append("\nüí° Por favor, especifica el nombre exacto del producto que deseas usar.")
            return "\n".join(respuesta)

    except Exception as e:
        error_msg = f"‚ùå Error al buscar el producto: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def crear_plan_financiamiento(
    id_sales_orders: int,
    num_installments: int,
    total_amount: float,
    start_date: str,
    frequency: str,
    notes: str = None,
    type_payment_plan: str = "Otro plan de financiamiento"
) -> str:
    """
    Crea un plan de financiamiento para una orden de venta espec√≠fica.
    
    Args:
        id_sales_orders (int): ID de la orden de venta
        num_installments (int): N√∫mero de cuotas
        total_amount (float): Monto total del plan
        start_date (str): Fecha de inicio en formato YYYY-MM-DD
        frequency (str): Frecuencia de pago (Mensual, Quincenal, Semanal, etc.)
        notes (str, optional): Notas adicionales del plan
        type_payment_plan (str, optional): Tipo de plan de pago. Default "Otro plan de financiamiento"
    
    Returns:
        str: ID del plan creado o mensaje de error
    """
    try:
        if not isinstance(id_sales_orders, int) or id_sales_orders <= 0:
            return "‚ùå El ID de la orden de venta debe ser un n√∫mero entero positivo."
        
        if not isinstance(num_installments, int) or num_installments <= 0:
            return "‚ùå El n√∫mero de cuotas debe ser un n√∫mero entero positivo."
        
        if not isinstance(total_amount, (int, float)) or total_amount <= 0:
            return "‚ùå El monto total debe ser un n√∫mero mayor que 0."
        
        # Validar formato de fecha
        try:
            datetime.strptime(start_date, '%Y-%m-%d')
        except ValueError:
            return "‚ùå La fecha debe estar en formato YYYY-MM-DD."
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar que la orden de venta existe
        cursor.execute("SELECT id_sales_orders FROM sales_orders WHERE id_sales_orders = %s", (id_sales_orders,))
        if not cursor.fetchone():
            conn.close()
            return f"‚ùå No se encontr√≥ la orden de venta con ID {id_sales_orders}."
        
        # Calcular monto por cuota
        amount_per_installment = total_amount / num_installments
        
        # Insertar el plan de financiamiento
        query = """
            INSERT INTO payment_plan (
                id_sales_orders,
                num_installments,
                total_amount,
                start_date,
                frequency,
                notes,
                pending_amount,
                type_payment_plan,
                status
            )
            VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, 'Pendiente'
            )
            RETURNING id_payment_plan;
        """
        
        pending_amount = total_amount * (-1)  # Monto pendiente negativo
        
        cursor.execute(query, (
            id_sales_orders, num_installments, total_amount, start_date, 
            frequency, notes, pending_amount, type_payment_plan
        ))
        
        id_payment_plan = cursor.fetchone()[0]
        
        # Crear las cuotas autom√°ticamente
        start_date_obj = datetime.strptime(start_date, '%Y-%m-%d')
        
        for i in range(1, num_installments + 1):
            # Calcular fecha de vencimiento seg√∫n la frecuencia
            if frequency.lower() == "mensual":
                due_date = start_date_obj + timedelta(days=30 * i)
            elif frequency.lower() == "quincenal":
                due_date = start_date_obj + timedelta(days=15 * i)
            elif frequency.lower() == "semanal":
                due_date = start_date_obj + timedelta(weeks=i)
            else:
                # Por defecto, mensual
                due_date = start_date_obj + timedelta(days=30 * i)
            
            # Insertar la cuota
            cursor.execute("""
                INSERT INTO payment_installment (
                    id_payment_plan,
                    installment_number,
                    amount,
                    due_date,
                    status
                )
                VALUES (
                    %s, %s, %s, %s, 'Pendiente'
                );
            """, (id_payment_plan, i, amount_per_installment, due_date.strftime('%Y-%m-%d')))
        
        conn.commit()
        conn.close()
        
        return (
            f"‚úÖ Plan de financiamiento creado exitosamente.\n"
            f"üÜî ID del plan: {id_payment_plan}\n"
            f"üõí Orden de venta: {id_sales_orders}\n"
            f"üìä N√∫mero de cuotas: {num_installments}\n"
            f"üí∞ Monto total: {total_amount}\n"
            f"üíµ Monto por cuota: {amount_per_installment:.2f}\n"
            f"üìÖ Fecha de inicio: {start_date}\n"
            f"üîÑ Frecuencia: {frequency}\n"
            f"üìù Tipo: {type_payment_plan}\n"
            f"üìã Estado: Pendiente"
        )

    except Exception as e:
        error_msg = f"‚ùå Error al crear el plan de financiamiento: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def crear_nuevo_cliente(
    unique_id: str,
    first_name: str,
    last_name: str,
    email: str,
    phone: str,
    client_type: str,
    company: str = "",
    phone_2: str = "",
    city: str = "",
    department: str = "",
    address: str = ""
) -> str:
    """
    Crea un nuevo cliente en la base de datos con la informaci√≥n proporcionada.
    
    Args:
        unique_id (str): N√∫mero de documento √∫nico del cliente (obligatorio)
        first_name (str): Nombre del cliente (obligatorio)
        last_name (str): Apellido del cliente (obligatorio)
        email (str): Correo electr√≥nico del cliente (obligatorio)
        phone (str): N√∫mero de tel√©fono principal (obligatorio)
        client_type (str): Tipo de cliente - "Empresa" o "Persona natural" (obligatorio)
        company (str): Nombre de la empresa (obligatorio solo si client_type es "Empresa")
        phone_2 (str): N√∫mero de tel√©fono secundario (opcional)
        city (str): Ciudad del cliente (obligatorio)
        department (str): Departamento del cliente (obligatorio)
        address (str): Direcci√≥n del cliente (obligatorio)
    
    Returns:
        str: Confirmaci√≥n de la creaci√≥n del cliente con su ID asignado
    """
    try:
        print(f"üë§ Creando nuevo cliente: {first_name} {last_name}")
        
        # Validar campos obligatorios
        if not unique_id or not first_name or not last_name or not email or not phone or not client_type or not city or not department or not address:
            return "‚ùå Error: Los campos unique_id, first_name, last_name, email, phone, client_type, city, department y address son obligatorios."
        
        # Validar client_type
        if client_type not in ["Empresa", "Persona natural"]:
            return "‚ùå Error: El client_type debe ser 'Empresa' o 'Persona natural'."
        
        # Validar company seg√∫n client_type
        if client_type == "Empresa" and not company:
            return "‚ùå Error: Si el tipo de cliente es 'Empresa', el nombre de la empresa es obligatorio."
        
        # Verificar si el cliente ya existe
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar si ya existe un cliente con el mismo unique_id
        cursor.execute("""
            SELECT id_client, full_name FROM public.clients 
            WHERE unique_id = %s
        """, (unique_id,))
        
        existing_client = cursor.fetchone()
        if existing_client:
            conn.close()
            return f"‚ùå Ya existe un cliente con el documento {unique_id}: {existing_client[1]} (ID: {existing_client[0]})"
        
        # Usar el client_type proporcionado por el usuario
        
        # Construir el nombre completo
        full_name = f"{first_name} {last_name}".strip()
        
        # Insertar el nuevo cliente
        query = """
            INSERT INTO clients (
                unique_id,
                client_type,
                email,
                full_name,
                first_name,
                last_name,
                company,
                phone,
                phone_2,
                city,
                deparment,
                address
            )
            VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
            RETURNING id_client;
        """
        
        cursor.execute(query, (
            unique_id,
            client_type,
            email,
            full_name,
            first_name,
            last_name,
            company,
            phone,
            phone_2,
            city,
            department,
            address
        ))
        
        id_client = cursor.fetchone()[0]
        conn.commit()
        conn.close()
        
        # Construir mensaje de confirmaci√≥n
        confirmacion = f"‚úÖ Cliente creado exitosamente.\n"
        confirmacion += f"üÜî ID del cliente: {id_client}\n"
        confirmacion += f"üë§ Nombre: {full_name}\n"
        confirmacion += f"üìÑ Documento: {unique_id}\n"
        confirmacion += f"üè∑Ô∏è Tipo: {client_type}\n"
        
        if company:
            confirmacion += f"üè¢ Empresa: {company}\n"
        if email:
            confirmacion += f"üìß Email: {email}\n"
        if phone:
            confirmacion += f"üìû Tel√©fono: {phone}\n"
        if phone_2:
            confirmacion += f"üì± Tel√©fono 2: {phone_2}\n"
        if city:
            confirmacion += f"üèôÔ∏è Ciudad: {city}\n"
        if department:
            confirmacion += f"üó∫Ô∏è Departamento: {department}\n"
        if address:
            confirmacion += f"üìç Direcci√≥n: {address}\n"
        
        print(f"‚úÖ Cliente creado con ID: {id_client}")
        return confirmacion
        
    except Exception as e:
        error_msg = f"‚ùå Error al crear el cliente: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def crear_plan_letras(
    id_sales_orders: int,
    num_installments: int,
    total_amount: float,
    start_date: str,
    frequency: str,
    letra_number: int,
    notes: str = None
) -> str:
    """
    Crea un plan de financiamiento tipo "Letras" para una orden de venta espec√≠fica.
    Crea el payment_plan, los payment_installment y la letra correspondiente.
    
    Args:
        id_sales_orders (int): ID de la orden de venta
        num_installments (int): N√∫mero de cuotas
        total_amount (float): Monto total del plan
        start_date (str): Fecha de inicio en formato YYYY-MM-DD
        frequency (str): Frecuencia de pago (Mensual, Quincenal, Semanal, etc.)
        letra_number (int): N√∫mero de la letra
        notes (str, optional): Notas adicionales del plan
    
    Returns:
        str: ID del plan creado o mensaje de error
    """
    try:
        if not isinstance(id_sales_orders, int) or id_sales_orders <= 0:
            return "‚ùå El ID de la orden de venta debe ser un n√∫mero entero positivo."
        
        if not isinstance(num_installments, int) or num_installments <= 0:
            return "‚ùå El n√∫mero de cuotas debe ser un n√∫mero entero positivo."
        
        if not isinstance(total_amount, (int, float)) or total_amount <= 0:
            return "‚ùå El monto total debe ser un n√∫mero mayor que 0."
        
        # Validar formato de fecha
        try:
            datetime.strptime(start_date, '%Y-%m-%d')
        except ValueError:
            return "‚ùå La fecha debe estar en formato YYYY-MM-DD."
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar que la orden de venta existe
        cursor.execute("SELECT id_sales_orders FROM sales_orders WHERE id_sales_orders = %s", (id_sales_orders,))
        if not cursor.fetchone():
            conn.close()
            return f"‚ùå No se encontr√≥ la orden de venta con ID {id_sales_orders}."
        
        # Validar letra_number
        if not isinstance(letra_number, int) or letra_number <= 0:
            return "‚ùå El n√∫mero de letra debe ser un n√∫mero entero positivo."
        
        # Calcular monto por cuota
        amount_per_installment = total_amount / num_installments
        
        # Insertar el plan de financiamiento tipo "Letra"
        query = """
            INSERT INTO payment_plan (
                id_sales_orders,
                num_installments,
                total_amount,
                start_date,
                frequency,
                notes,
                pending_amount,
                type_payment_plan,
                status
            )
            VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, 'Pendiente'
            )
            RETURNING id_payment_plan;
        """
        
        pending_amount = total_amount * (-1)  # Monto pendiente negativo
        type_payment_plan = "Letra"
        
        cursor.execute(query, (
            id_sales_orders, num_installments, total_amount, start_date, 
            frequency, notes, pending_amount, type_payment_plan
        ))
        
        id_payment_plan = cursor.fetchone()[0]
        
        # Crear las cuotas autom√°ticamente
        start_date_obj = datetime.strptime(start_date, '%Y-%m-%d')
        
        for i in range(1, num_installments + 1):
            # Calcular fecha de vencimiento seg√∫n la frecuencia
            if frequency.lower() == "mensual":
                due_date = start_date_obj + timedelta(days=30 * i)
            elif frequency.lower() == "quincenal":
                due_date = start_date_obj + timedelta(days=15 * i)
            elif frequency.lower() == "semanal":
                due_date = start_date_obj + timedelta(weeks=i)
            else:
                # Por defecto, mensual
                due_date = start_date_obj + timedelta(days=30 * i)
            
            # Insertar la cuota
            cursor.execute("""
                INSERT INTO payment_installment (
                    id_payment_plan,
                    installment_number,
                    amount,
                    due_date,
                    status
                )
                VALUES (
                    %s, %s, %s, %s, 'Pendiente'
                );
            """, (id_payment_plan, i, amount_per_installment, due_date.strftime('%Y-%m-%d')))
        
        # Crear la letra
        cursor.execute("""
            INSERT INTO letras (
                id_payment_plan,
                letra_number,
                last_date,
                status
            )
            VALUES (
                %s, %s, %s, 'Pendiente'
            );
        """, (id_payment_plan, letra_number, due_date.strftime('%Y-%m-%d')))
        
        conn.commit()
        conn.close()
        
        return (
            f"‚úÖ Plan de letras creado exitosamente.\n"
            f"üÜî ID del plan: {id_payment_plan}\n"
            f"üõí Orden de venta: {id_sales_orders}\n"
            f"üìä N√∫mero de cuotas: {num_installments}\n"
            f"üí∞ Monto total: {total_amount}\n"
            f"üíµ Monto por cuota: {amount_per_installment:.2f}\n"
            f"üìÖ Fecha de inicio: {start_date}\n"
            f"üîÑ Frecuencia: {frequency}\n"
            f"üìù Tipo: Letra\n"
            f"üìÑ N√∫mero de letra: {letra_number}\n"
            f"üìã Estado: Pendiente"
        )
        
    except Exception as e:
        error_msg = f"‚ùå Error al crear el plan de letras: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def consultar_detalles_ordenes_cliente(id_client: int) -> str:
    """
    Consulta todos los detalles de √≥rdenes de venta de un cliente espec√≠fico, mostrando informaci√≥n completa
    incluyendo productos, cantidades, precios y estado de devoluciones.
    
    Args:
        id_client (int): ID del cliente
        
    Returns:
        str: Lista de detalles de √≥rdenes con informaci√≥n completa
    """
    try:
        if not isinstance(id_client, int) or id_client <= 0:
            return "‚ùå El ID del cliente debe ser un n√∫mero entero positivo."
        
        print(f"üîç Consultando detalles de √≥rdenes para cliente: {id_client}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Consultar detalles de √≥rdenes del cliente
        query = """
            SELECT 
                sod.id_sales_order_detail,
                sod.id_sales_orders,
                sod.id_product,
                sod.quantity,
                sod.unit_price,
                sod.subtotal,
                COALESCE(sod.devolucion, 'normal') as estado_devolucion,
                p.name_product,
                p.description,
                c.full_name,
                so.order_date,
                so.total as total_orden
            FROM sales_order_details sod
            JOIN products p ON sod.id_product = p.id_product
            JOIN sales_orders so ON sod.id_sales_orders = so.id_sales_orders
            JOIN clients c ON so.id_client = c.id_client
            WHERE so.id_client = %s
            ORDER BY so.order_date DESC, sod.id_sales_order_detail DESC
        """
        
        cursor.execute(query, (id_client,))
        detalles = cursor.fetchall()
        conn.close()
        
        if not detalles:
            return f"‚ùå No se encontraron detalles de √≥rdenes para el cliente con ID {id_client}."
        
        # Construir respuesta
        respuesta = [f"üìã Detalles de √≥rdenes para cliente: {detalles[0][9]} (ID: {id_client})"]
        respuesta.append("=" * 80)
        
        for detalle in detalles:
            id_detail, id_order, id_product, quantity, unit_price, subtotal, estado_devolucion, product_name, description, client_name, order_date, total_orden = detalle
            
            # Determinar emoji seg√∫n estado de devoluci√≥n
            estado_emoji = "üîÑ" if estado_devolucion == 'devolucion' else "‚úÖ"
            estado_texto = "DEVUELTO" if estado_devolucion == 'devolucion' else "NORMAL"
            
            respuesta.append(f"{estado_emoji} Detalle ID: {id_detail}")
            respuesta.append(f"   üõí Orden: {id_order} | üìÖ Fecha: {order_date}")
            respuesta.append(f"   üì¶ Producto: {product_name} (ID: {id_product})")
            respuesta.append(f"   üìù Descripci√≥n: {description}")
            respuesta.append(f"   üìä Cantidad: {quantity} | üí∞ Precio unitario: {unit_price}")
            respuesta.append(f"   üíµ Subtotal: {subtotal} | üè∑Ô∏è Estado: {estado_texto}")
            respuesta.append("-" * 60)
        
        respuesta.append(f"\nüìä Total de detalles encontrados: {len(detalles)}")
        
        print(f"‚úÖ Encontrados {len(detalles)} detalles de √≥rdenes para cliente {id_client}")
        return "\n".join(respuesta)
        
    except Exception as e:
        error_msg = f"‚ùå Error al consultar detalles de √≥rdenes: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def procesar_devolucion(id_sales_order_detail: int) -> str:
    """
    Procesa una devoluci√≥n marcando un detalle espec√≠fico de una orden de venta como devuelto.
    
    Args:
        id_sales_order_detail (int): ID del detalle de la orden de venta a devolver
        
    Returns:
        str: Confirmaci√≥n de la devoluci√≥n procesada o mensaje de error
    """
    try:
        if not isinstance(id_sales_order_detail, int) or id_sales_order_detail <= 0:
            return "‚ùå El ID del detalle de la orden debe ser un n√∫mero entero positivo."
        
        print(f"üîÑ Procesando devoluci√≥n para detalle de orden: {id_sales_order_detail}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar que el detalle existe y obtener informaci√≥n
        cursor.execute("""
            SELECT 
                sod.id_sales_order_detail,
                sod.id_sales_orders,
                sod.id_product,
                sod.quantity,
                sod.unit_price,
                sod.subtotal,
                p.name_product,
                c.full_name,
                c.id_client
            FROM sales_order_details sod
            JOIN products p ON sod.id_product = p.id_product
            JOIN sales_orders so ON sod.id_sales_orders = so.id_sales_orders
            JOIN clients c ON so.id_client = c.id_client
            WHERE sod.id_sales_order_detail = %s
        """, (id_sales_order_detail,))
        
        detalle = cursor.fetchone()
        if not detalle:
            conn.close()
            return f"‚ùå No se encontr√≥ el detalle de orden con ID {id_sales_order_detail}."
        
        # Verificar si ya est√° marcado como devoluci√≥n
        cursor.execute("""
            SELECT devolucion FROM sales_order_details 
            WHERE id_sales_order_detail = %s
        """, (id_sales_order_detail,))
        
        estado_actual = cursor.fetchone()[0]
        if estado_actual == 'devolucion':
            conn.close()
            return f"‚ùå El detalle {id_sales_order_detail} ya est√° marcado como devoluci√≥n."
        
        # Procesar la devoluci√≥n
        cursor.execute("""
            UPDATE sales_order_details
            SET devolucion = 'devolucion'
            WHERE id_sales_order_detail = %s
        """, (id_sales_order_detail,))
        
        conn.commit()
        conn.close()
        
        # Construir mensaje de confirmaci√≥n
        id_detail, id_order, id_product, quantity, unit_price, subtotal, product_name, client_name, id_client = detalle
        
        confirmacion = f"‚úÖ Devoluci√≥n procesada exitosamente.\n"
        confirmacion += f"üÜî ID del detalle: {id_detail}\n"
        confirmacion += f"üõí Orden de venta: {id_order}\n"
        confirmacion += f"üë§ Cliente: {client_name} (ID: {id_client})\n"
        confirmacion += f"üì¶ Producto: {product_name} (ID: {id_product})\n"
        confirmacion += f"üìä Cantidad devuelta: {quantity}\n"
        confirmacion += f"üí∞ Precio unitario: {unit_price}\n"
        confirmacion += f"üíµ Subtotal devuelto: {subtotal}\n"
        confirmacion += f"üîÑ Estado: Devoluci√≥n procesada"
        
        print(f"‚úÖ Devoluci√≥n procesada para detalle {id_sales_order_detail}")
        return confirmacion
        
    except Exception as e:
        error_msg = f"‚ùå Error al procesar la devoluci√≥n: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def buscar_clasificacion_por_tipo(tipo: str = "") -> str:
    """
    Busca clasificaciones en la base de datos por tipo (venta de producto o venta de servicio).
    Venta de producto: ID 1-5, Venta de servicio: ID 6-10

    Args:
        tipo (str): Tipo de clasificaci√≥n ("producto" o "servicio")

    Returns:
        str: Lista de clasificaciones encontradas con su ID, nombre y primer apellido
    """
    try:
        print(f"üîç Buscando clasificaciones por tipo: '{tipo}'")
        
        conn = get_db_connection()
        cursor = conn.cursor()

        if tipo.lower() == "venta producto":
            query = """
                SELECT 
                    id_classification,
                    nombre,
                    primer_apellido
                FROM public.classification
                WHERE id_classification BETWEEN 1 AND 5
                ORDER BY nombre, primer_apellido
            """
        elif tipo.lower() == "venta servicio":
            query = """
                SELECT 
                    id_classification,
                    nombre,
                    primer_apellido
                FROM public.classification
                WHERE id_classification BETWEEN 6 AND 10
                ORDER BY nombre, primer_apellido
            """
        else:
            return "‚ùå Tipo inv√°lido. Debe ser 'producto' o 'servicio'."

        cursor.execute(query)
        resultados = cursor.fetchall()
        conn.close()

        if not resultados:
            return f"No se encontraron clasificaciones de {tipo} en la base de datos."

        # Formatear resultados
        respuesta = [f"üìã Clasificaciones de {tipo}:"]
        for id_clasificacion, nombre_clas, primer_apellido_clas in resultados:
            respuesta.append(f"{id_clasificacion}. {nombre_clas} {primer_apellido_clas}")

        print(f"‚úÖ Encontradas {len(resultados)} clasificaciones de {tipo}")
        return "\n".join(respuesta)
        
    except Exception as e:
        error_msg = f"Error al consultar clasificaciones por tipo: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"

@tool
def gestionar_caja_conciliaciones(accion: str, tipo: str, saldo_caja: float = None, saldo_davivienda: float = None, saldo_bancolombia: float = None) -> str:
    """
    Gestiona la apertura y cierre de caja y conciliaciones bancarias.
    
    Args:
        accion (str): "abrir", "cerrar" o "consultar"
        tipo (str): "caja" (solo fila 1) o "conciliaciones" (filas 2 y 3)
        saldo_caja (float): Monto para caja (solo cuando tipo="caja" y accion="abrir")
        saldo_davivienda (float): Monto para banco Davivienda (solo cuando tipo="conciliaciones" y accion="abrir")
        saldo_bancolombia (float): Monto para banco Bancolombia (solo cuando tipo="conciliaciones" y accion="abrir")
    
    Returns:
        str: Confirmaci√≥n de la operaci√≥n realizada o estado actual
    """
    try:
        print(f"üîß gestionar_caja_conciliaciones - Acci√≥n: {accion}, Tipo: {tipo}")
        print(f"üîß Par√°metros - saldo_caja: {saldo_caja}, saldo_davivienda: {saldo_davivienda}, saldo_bancolombia: {saldo_bancolombia}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Si es consulta, solo leer el estado actual
        if accion.lower() == "consultar":
            if tipo.lower() == "caja":
                # Consultar solo fila 1 (caja)
                query = "SELECT id, saldo_inicial, estado_caj FROM estado_caja WHERE id = 1"
                cursor.execute(query)
                result = cursor.fetchone()
                conn.close()
                
                if result:
                    id_fila, saldo_inicial, estado_caj = result
                    estado_texto = "Abierta" if estado_caj else "Cerrada"
                    return f"üìä Estado actual de la caja:\nüîß Estado: {estado_texto}\nüí∞ Saldo inicial: ${saldo_inicial:,.2f}"
                else:
                    return "‚ùå No se encontr√≥ informaci√≥n de la caja"
                    
            elif tipo.lower() == "conciliaciones":
                # Consultar filas 2 (Davivienda) y 3 (Bancolombia)
                query = "SELECT id, saldo_inicial, estado_caj FROM estado_caja WHERE id IN (2, 3) ORDER BY id"
                cursor.execute(query)
                results = cursor.fetchall()
                conn.close()
                
                if results:
                    response = "üìä Estado actual de las conciliaciones:\n"
                    for id_fila, saldo_inicial, estado_caj in results:
                        banco = "Davivienda" if id_fila == 2 else "Bancolombia"
                        estado_texto = "Abierta" if estado_caj else "Cerrada"
                        response += f"üè¶ {banco}:\n   üîß Estado: {estado_texto}\n   üí∞ Saldo inicial: ${saldo_inicial:,.2f}\n"
                    return response
                else:
                    return "‚ùå No se encontr√≥ informaci√≥n de las conciliaciones"
            else:
                conn.close()
                return "‚ùå Tipo inv√°lido para consulta. Debe ser 'caja' o 'conciliaciones'."
        
        # Validar par√°metros seg√∫n el tipo y la acci√≥n
        if accion.lower() == "abrir":
            if tipo.lower() == "caja":
                if saldo_caja is None:
                    return "‚ùå Para abrir caja, debes proporcionar el saldo_caja."
                print(f"üí∞ Abriendo {tipo} con saldo: {saldo_caja}")
            elif tipo.lower() == "conciliaciones":
                if saldo_davivienda is None or saldo_bancolombia is None:
                    return "‚ùå Para abrir conciliaciones, debes proporcionar saldo_davivienda y saldo_bancolombia."
                print(f"üí∞ Abriendo {tipo} - Davivienda: {saldo_davivienda}, Bancolombia: {saldo_bancolombia}")
            else:
                return "‚ùå Tipo inv√°lido. Debe ser 'caja' o 'conciliaciones'."
        elif accion.lower() == "cerrar":
            if tipo.lower() not in ["caja", "conciliaciones"]:
                return "‚ùå Tipo inv√°lido. Debe ser 'caja' o 'conciliaciones'."
            print(f"üîí Cerrando {tipo}")
        else:
            conn.close()
            return "‚ùå Acci√≥n inv√°lida. Debe ser 'abrir', 'cerrar' o 'consultar'."
        
        # Determinar el estado seg√∫n la acci√≥n
        if accion.lower() == "abrir":
            estado_caj = True
        elif accion.lower() == "cerrar":
            estado_caj = False
        else:
            conn.close()
            return "‚ùå Acci√≥n inv√°lida. Debe ser 'abrir' o 'cerrar'."
        
        # Determinar qu√© filas actualizar seg√∫n el tipo
        if tipo.lower() == "caja":
            # Solo actualizar fila 1 (caja)
            ids_to_update = [1]
            saldos = [saldo_caja if accion.lower() == "abrir" else 0]
        elif tipo.lower() == "conciliaciones":
            # Actualizar filas 2 (Davivienda) y 3 (Bancolombia)
            ids_to_update = [2, 3]
            saldos = [
                saldo_davivienda if accion.lower() == "abrir" else 0,
                saldo_bancolombia if accion.lower() == "abrir" else 0
            ]
        
        print(f"üîß Filas a actualizar: {ids_to_update}")
        print(f"üîß Saldos a usar: {saldos}")
        print(f"üîß Estado final: {estado_caj}")
        
        # Ejecutar las actualizaciones
        for i, id_fila in enumerate(ids_to_update):
            query = """
                INSERT INTO estado_caja
                (id, saldo_inicial, estado_caj)
                VALUES (%s, %s, %s)
                ON CONFLICT (id) DO UPDATE
                SET 
                    saldo_inicial = EXCLUDED.saldo_inicial,
                    updated_at = NOW(),
                    estado_caj = EXCLUDED.estado_caj
            """
            
            print(f"üîß Actualizando fila {id_fila} con saldo: {saldos[i]}, estado_caj: {estado_caj}")
            print(f"üîß Query SQL: {query}")
            print(f"üîß Par√°metros: id={id_fila}, saldo={saldos[i]}, estado_caj={estado_caj}")
            
            cursor.execute(query, (id_fila, saldos[i], estado_caj))
            
            # Verificar que la actualizaci√≥n fue exitosa
            verify_query = "SELECT id, saldo_inicial, estado_caj FROM estado_caja WHERE id = %s"
            cursor.execute(verify_query, (id_fila,))
            result = cursor.fetchone()
            print(f"‚úÖ Fila {id_fila} actualizada exitosamente - Verificaci√≥n: {result}")
        
        conn.commit()
        conn.close()
        
        # Determinar el texto del estado para mostrar
        estado_texto = "Abierta" if estado_caj else "Cerrada"
        
        # Construir mensaje seg√∫n el tipo y la acci√≥n
        if tipo.lower() == "caja":
            if accion.lower() == "abrir":
                return f"‚úÖ Caja {estado_texto.lower()} exitosamente\nüí∞ Saldo inicial: ${saldo_caja:,.2f}\nüéØ Operaci√≥n completada exitosamente."
            else:  # cerrar
                return f"‚úÖ Caja {estado_texto.lower()} exitosamente\nüéØ Operaci√≥n completada exitosamente."
        elif tipo.lower() == "conciliaciones":
            if accion.lower() == "abrir":
                return f"‚úÖ Conciliaciones {estado_texto.lower()}s exitosamente\nüí∞ Saldo Davivienda: ${saldo_davivienda:,.2f}\nüí∞ Saldo Bancolombia: ${saldo_bancolombia:,.2f}\nüéØ Operaci√≥n completada exitosamente."
            else:  # cerrar
                return f"‚úÖ Conciliaciones {estado_texto.lower()}s exitosamente\nüéØ Operaci√≥n completada exitosamente."
        
    except Exception as e:
        print(f"‚ùå Error en gestionar_caja_conciliaciones: {str(e)}")
        return f"‚ùå Error al gestionar {tipo}: {str(e)}"

@tool
def consultar_usuario_autorizado(phone: str) -> str:
    """
    Consulta si un n√∫mero de tel√©fono est√° autorizado para usar el agente desde la tabla users_agent en Supabase.
    Verifica el tipo de usuario (Administrador o Secundario) y su estado activo.
    
    Args:
        phone (str): N√∫mero de tel√©fono a consultar (formato: 573195792747)
        
    Returns:
        str: Informaci√≥n del usuario autorizado o mensaje de no autorizado
    """
    try:
        print(f"üîç Consultando autorizaci√≥n para tel√©fono: {phone}")
        
        # Validar formato del tel√©fono
        if not phone or not phone.isdigit() or len(phone) < 10:
            return "‚ùå Formato de tel√©fono inv√°lido. Debe ser un n√∫mero de al menos 10 d√≠gitos."
        
        # Conectar a Supabase
        supabase = get_supabase_client()
        
        # Consultar en la tabla users_agent
        response = supabase.table("users_agent").select(
            "phone, name, type, status"
        ).eq("phone", phone).execute()
        
        if not response.data:
            print(f"‚ùå Usuario no encontrado para tel√©fono: {phone}")
            return f"‚ùå El n√∫mero {phone} no est√° autorizado para usar el agente."
        
        user_data = response.data[0]
        phone_db = user_data.get("phone")
        name = user_data.get("name", "Sin nombre")
        user_type = user_data.get("type")
        status = user_data.get("status")
        
        print(f"‚úÖ Usuario encontrado: {name} - Tipo: {user_type} - Status: {status}")
        
        # Verificar si el usuario est√° activo
        if not status:
            return f"‚ùå El usuario {name} ({phone}) no est√° activo en el sistema."
        
        # Construir respuesta seg√∫n el tipo de usuario
        if user_type == "Administrador":
            return (
                f"‚úÖ USUARIO AUTORIZADO - ADMINISTRADOR\n"
                f"üë§ Nombre: {name}\n"
                f"üìû Tel√©fono: {phone}\n"
                f"üîë Tipo: {user_type}\n"
                f"üü¢ Estado: Activo\n"
                f"üí¨ Acceso completo al agente"
            )
        elif user_type == "Secundario":
            return (
                f"‚úÖ USUARIO AUTORIZADO - SECUNDARIO\n"
                f"üë§ Nombre: {name}\n"
                f"üìû Tel√©fono: {phone}\n"
                f"üîë Tipo: {user_type}\n"
                f"üü¢ Estado: Activo\n"
                f"üí¨ Acceso limitado al agente (asignado por administrador)"
            )
        else:
            return (
                f"‚ö†Ô∏è USUARIO CON TIPO DESCONOCIDO\n"
                f"üë§ Nombre: {name}\n"
                f"üìû Tel√©fono: {phone}\n"
                f"üîë Tipo: {user_type}\n"
                f"üü¢ Estado: Activo\n"
                f"‚ùì Tipo de usuario no reconocido"
            )
        
    except Exception as e:
        error_msg = f"‚ùå Error al consultar usuario autorizado: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def listar_usuarios_autorizados() -> str:
    """
    Lista todos los usuarios autorizados en la tabla users_agent de Supabase.
    Muestra informaci√≥n de administradores y usuarios secundarios activos.
    
    Returns:
        str: Lista de todos los usuarios autorizados con su informaci√≥n
    """
    try:
        print("üîç Listando todos los usuarios autorizados")
        
        # Conectar a Supabase
        supabase = get_supabase_client()
        
        # Consultar todos los usuarios activos
        response = supabase.table("users_agent").select(
            "phone, name, type, status"
        ).eq("status", True).order("type", desc=False).execute()
        
        if not response.data:
            return "‚ùå No se encontraron usuarios autorizados en el sistema."
        
        users = response.data
        print(f"‚úÖ Encontrados {len(users)} usuarios autorizados")
        
        # Separar por tipo
        administradores = [user for user in users if user.get("type") == "Administrador"]
        secundarios = [user for user in users if user.get("type") == "Secundario"]
        otros = [user for user in users if user.get("type") not in ["Administrador", "Secundario"]]
        
        # Construir respuesta
        respuesta = ["üìã LISTA DE USUARIOS AUTORIZADOS"]
        respuesta.append("=" * 50)
        
        if administradores:
            respuesta.append(f"\nüëë ADMINISTRADORES ({len(administradores)}):")
            for user in administradores:
                respuesta.append(f"  üë§ {user.get('name', 'Sin nombre')}")
                respuesta.append(f"  üìû {user.get('phone')}")
                respuesta.append("  üîë Tipo: Administrador")
                respuesta.append("  üü¢ Estado: Activo")
                respuesta.append("  " + "-" * 30)
        
        if secundarios:
            respuesta.append(f"\nüë• USUARIOS SECUNDARIOS ({len(secundarios)}):")
            for user in secundarios:
                respuesta.append(f"  üë§ {user.get('name', 'Sin nombre')}")
                respuesta.append(f"  üìû {user.get('phone')}")
                respuesta.append("  üîë Tipo: Secundario")
                respuesta.append("  üü¢ Estado: Activo")
                respuesta.append("  " + "-" * 30)
        
        if otros:
            respuesta.append(f"\n‚ùì OTROS TIPOS ({len(otros)}):")
            for user in otros:
                respuesta.append(f"  üë§ {user.get('name', 'Sin nombre')}")
                respuesta.append(f"  üìû {user.get('phone')}")
                respuesta.append(f"  üîë Tipo: {user.get('type', 'Desconocido')}")
                respuesta.append("  üü¢ Estado: Activo")
                respuesta.append("  " + "-" * 30)
        
        respuesta.append(f"\nüìä RESUMEN:")
        respuesta.append(f"  ‚Ä¢ Total de usuarios activos: {len(users)}")
        respuesta.append(f"  ‚Ä¢ Administradores: {len(administradores)}")
        respuesta.append(f"  ‚Ä¢ Usuarios secundarios: {len(secundarios)}")
        respuesta.append(f"  ‚Ä¢ Otros tipos: {len(otros)}")
        
        return "\n".join(respuesta)
        
    except Exception as e:
        error_msg = f"‚ùå Error al listar usuarios autorizados: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def asignar_usuario_secundario(nombre: str, telefono: str, asignado_por: str) -> str:
    """
    Asigna un nuevo usuario secundario al agente. Solo los administradores pueden usar esta herramienta.
    Crea un nuevo registro en la tabla users_agent con tipo 'Secundario' y status activo.
    
    Args:
        nombre (str): Nombre completo del usuario a asignar
        telefono (str): N√∫mero de tel√©fono del usuario (formato: 573195792747)
        asignado_por (str): N√∫mero de tel√©fono del administrador que hace la asignaci√≥n
        
    Returns:
        str: Confirmaci√≥n de la asignaci√≥n o mensaje de error
    """
    try:
        print(f"üë§ Asignando usuario secundario: {nombre} - {telefono}")
        print(f"üîë Asignado por administrador: {asignado_por}")
        
        # Validar que quien asigna sea administrador
        supabase = get_supabase_client()
        
        # Verificar que el asignador sea administrador
        admin_check = supabase.table("users_agent").select(
            "type, status"
        ).eq("phone", asignado_por).execute()
        
        if not admin_check.data:
            return f"‚ùå Error: El n√∫mero {asignado_por} no est√° registrado en el sistema."
        
        admin_data = admin_check.data[0]
        if admin_data.get("type") != "Administrador":
            return f"‚ùå Error: Solo los administradores pueden asignar usuarios secundarios."
        
        if not admin_data.get("status"):
            return f"‚ùå Error: El administrador no est√° activo en el sistema."
        
        # Validar formato del tel√©fono
        if not telefono or not telefono.isdigit() or len(telefono) < 10:
            return "‚ùå Formato de tel√©fono inv√°lido. Debe ser un n√∫mero de al menos 10 d√≠gitos."
        
        # Verificar si el usuario ya existe
        existing_user = supabase.table("users_agent").select(
            "phone, name, type, status"
        ).eq("phone", telefono).execute()
        
        if existing_user.data:
            user_data = existing_user.data[0]
            if user_data.get("status"):
                return f"‚ùå El n√∫mero {telefono} ya est√° registrado como usuario activo: {user_data.get('name')} ({user_data.get('type')})"
            else:
                # Si existe pero est√° inactivo, reactivarlo como secundario
                supabase.table("users_agent").update({
                    "name": nombre,
                    "type": "Secundario",
                    "status": True
                }).eq("phone", telefono).execute()
                
                return (
                    f"‚úÖ Usuario reactivado exitosamente.\n"
                    f"üë§ Nombre: {nombre}\n"
                    f"üìû Tel√©fono: {telefono}\n"
                    f"üîë Tipo: Secundario\n"
                    f"üü¢ Estado: Activo\n"
                    f"üëë Asignado por: {asignado_por}\n"
                    f"üí¨ El usuario ahora puede interactuar con el agente"
                )
        
        # Crear nuevo usuario secundario
        new_user = {
            "phone": telefono,
            "name": nombre,
            "type": "Secundario",
            "status": True
        }
        
        supabase.table("users_agent").insert(new_user).execute()
        
        return (
            f"‚úÖ Usuario secundario asignado exitosamente.\n"
            f"üë§ Nombre: {nombre}\n"
            f"üìû Tel√©fono: {telefono}\n"
            f"üîë Tipo: Secundario\n"
            f"üü¢ Estado: Activo\n"
            f"üëë Asignado por: {asignado_por}\n"
            f"üí¨ El usuario ahora puede interactuar con el agente"
        )
        
    except Exception as e:
        error_msg = f"‚ùå Error al asignar usuario secundario: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def buscar_usuario_por_nombre(nombre: str) -> str:
    """
    Busca usuarios en la tabla users_agent por nombre (b√∫squeda flexible).
    
    Args:
        nombre (str): Nombre o parte del nombre del usuario a buscar
        
    Returns:
        str: Informaci√≥n de los usuarios encontrados
    """
    try:
        print(f"üîç Buscando usuario por nombre: '{nombre}'")
        
        if not nombre or not nombre.strip():
            return "‚ùå Debes proporcionar un nombre para buscar."
        
        supabase = get_supabase_client()
        
        # B√∫squeda flexible por nombre (ILIKE para PostgreSQL)
        response = supabase.table("users_agent").select(
            "phone, name, type, status"
        ).ilike("name", f"%{nombre.strip()}%").execute()
        
        if not response.data:
            return f"‚ùå No se encontraron usuarios con el nombre '{nombre}'."
        
        users = response.data
        print(f"‚úÖ Encontrados {len(users)} usuarios")
        
        # Construir respuesta
        respuesta = [f"üîç RESULTADOS DE B√öSQUEDA: '{nombre}'"]
        respuesta.append("=" * 50)
        
        for user in users:
            phone = user.get("phone")
            name = user.get("name", "Sin nombre")
            user_type = user.get("type")
            status = user.get("status")
            
            estado_emoji = "üü¢" if status else "üî¥"
            estado_texto = "Activo" if status else "Inactivo"
            
            respuesta.append(f"\n{estado_emoji} {name}")
            respuesta.append(f"üìû Tel√©fono: {phone}")
            respuesta.append(f"üîë Tipo: {user_type}")
            respuesta.append(f"üìä Estado: {estado_texto}")
            respuesta.append("-" * 30)
        
        respuesta.append(f"\nüìä Total encontrados: {len(users)}")
        
        return "\n".join(respuesta)
        
    except Exception as e:
        error_msg = f"‚ùå Error al buscar usuario por nombre: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def cambiar_status_usuario(telefono: str, nuevo_status: bool, modificado_por: str) -> str:
    """
    Cambia el status de un usuario (activar/desactivar). Solo los administradores pueden usar esta herramienta.
    
    Args:
        telefono (str): N√∫mero de tel√©fono del usuario a modificar
        nuevo_status (bool): True para activar, False para desactivar
        modificado_por (str): N√∫mero de tel√©fono del administrador que hace el cambio
        
    Returns:
        str: Confirmaci√≥n del cambio o mensaje de error
    """
    try:
        print(f"üîÑ Cambiando status de usuario: {telefono} -> {nuevo_status}")
        print(f"üîë Modificado por administrador: {modificado_por}")
        
        # Validar que quien modifica sea administrador
        supabase = get_supabase_client()
        
        # Verificar que el modificador sea administrador
        admin_check = supabase.table("users_agent").select(
            "type, status"
        ).eq("phone", modificado_por).execute()
        
        if not admin_check.data:
            return f"‚ùå Error: El n√∫mero {modificado_por} no est√° registrado en el sistema."
        
        admin_data = admin_check.data[0]
        if admin_data.get("type") != "Administrador":
            return f"‚ùå Error: Solo los administradores pueden cambiar el status de usuarios."
        
        if not admin_data.get("status"):
            return f"‚ùå Error: El administrador no est√° activo en el sistema."
        
        # Verificar que el usuario existe
        user_check = supabase.table("users_agent").select(
            "phone, name, type, status"
        ).eq("phone", telefono).execute()
        
        if not user_check.data:
            return f"‚ùå Error: El usuario con tel√©fono {telefono} no existe en el sistema."
        
        user_data = user_check.data[0]
        current_status = user_data.get("status")
        user_name = user_data.get("name", "Sin nombre")
        user_type = user_data.get("type")
        
        # No permitir desactivar administradores
        if user_type == "Administrador" and not nuevo_status:
            return f"‚ùå Error: No se puede desactivar un usuario administrador."
        
        # Si el status ya es el mismo, no hacer nada
        if current_status == nuevo_status:
            status_texto = "Activo" if nuevo_status else "Inactivo"
            return f"‚ÑπÔ∏è El usuario {user_name} ({telefono}) ya est√° {status_texto.lower()}."
        
        # Actualizar el status
        supabase.table("users_agent").update({
            "status": nuevo_status
        }).eq("phone", telefono).execute()
        
        # Construir mensaje de confirmaci√≥n
        status_texto = "activado" if nuevo_status else "desactivado"
        accion_texto = "puede" if nuevo_status else "ya no puede"
        
        return (
            f"‚úÖ Usuario {status_texto} exitosamente.\n"
            f"üë§ Nombre: {user_name}\n"
            f"üìû Tel√©fono: {telefono}\n"
            f"üîë Tipo: {user_type}\n"
            f"üìä Estado: {'Activo' if nuevo_status else 'Inactivo'}\n"
            f"üëë Modificado por: {modificado_por}\n"
            f"üí¨ El usuario {accion_texto} interactuar con el agente"
        )
        
    except Exception as e:
        error_msg = f"‚ùå Error al cambiar status de usuario: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def cambiar_tipo_usuario(telefono: str, nuevo_tipo: str, modificado_por: str) -> str:
    """
    Cambia el tipo de usuario (Administrador/Secundario). Solo los administradores pueden usar esta herramienta.
    
    Args:
        telefono (str): N√∫mero de tel√©fono del usuario a modificar
        nuevo_tipo (str): Nuevo tipo ("Administrador" o "Secundario")
        modificado_por (str): N√∫mero de tel√©fono del administrador que hace el cambio
        
    Returns:
        str: Confirmaci√≥n del cambio o mensaje de error
    """
    try:
        print(f"üîÑ Cambiando tipo de usuario: {telefono} -> {nuevo_tipo}")
        print(f"üîë Modificado por administrador: {modificado_por}")
        
        # Validar tipo
        if nuevo_tipo not in ["Administrador", "Secundario"]:
            return "‚ùå Error: El tipo debe ser 'Administrador' o 'Secundario'."
        
        # Validar que quien modifica sea administrador
        supabase = get_supabase_client()
        
        # Verificar que el modificador sea administrador
        admin_check = supabase.table("users_agent").select(
            "type, status"
        ).eq("phone", modificado_por).execute()
        
        if not admin_check.data:
            return f"‚ùå Error: El n√∫mero {modificado_por} no est√° registrado en el sistema."
        
        admin_data = admin_check.data[0]
        if admin_data.get("type") != "Administrador":
            return f"‚ùå Error: Solo los administradores pueden cambiar el tipo de usuarios."
        
        if not admin_data.get("status"):
            return f"‚ùå Error: El administrador no est√° activo en el sistema."
        
        # Verificar que el usuario existe
        user_check = supabase.table("users_agent").select(
            "phone, name, type, status"
        ).eq("phone", telefono).execute()
        
        if not user_check.data:
            return f"‚ùå Error: El usuario con tel√©fono {telefono} no existe en el sistema."
        
        user_data = user_check.data[0]
        current_type = user_data.get("type")
        user_name = user_data.get("name", "Sin nombre")
        
        # Si el tipo ya es el mismo, no hacer nada
        if current_type == nuevo_tipo:
            return f"‚ÑπÔ∏è El usuario {user_name} ({telefono}) ya es de tipo {nuevo_tipo}."
        
        # Actualizar el tipo
        supabase.table("users_agent").update({
            "type": nuevo_tipo
        }).eq("phone", telefono).execute()
        
        return (
            f"‚úÖ Tipo de usuario cambiado exitosamente.\n"
            f"üë§ Nombre: {user_name}\n"
            f"üìû Tel√©fono: {telefono}\n"
            f"üîë Tipo anterior: {current_type}\n"
            f"üîë Tipo nuevo: {nuevo_tipo}\n"
            f"üëë Modificado por: {modificado_por}\n"
            f"üí¨ El usuario ahora tiene permisos de {nuevo_tipo.lower()}"
        )
        
    except Exception as e:
        error_msg = f"‚ùå Error al cambiar tipo de usuario: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def eliminar_usuario_secundario(telefono: str, eliminado_por: str) -> str:
    """
    Elimina un usuario secundario del sistema (cambia status a False). Solo los administradores pueden usar esta herramienta.
    
    Args:
        telefono (str): N√∫mero de tel√©fono del usuario a eliminar
        eliminado_por (str): N√∫mero de tel√©fono del administrador que hace la eliminaci√≥n
        
    Returns:
        str: Confirmaci√≥n de la eliminaci√≥n o mensaje de error
    """
    try:
        print(f"üóëÔ∏è Eliminando usuario secundario: {telefono}")
        print(f"üîë Eliminado por administrador: {eliminado_por}")
        
        # Validar que quien elimina sea administrador
        supabase = get_supabase_client()
        
        # Verificar que el eliminador sea administrador
        admin_check = supabase.table("users_agent").select(
            "type, status"
        ).eq("phone", eliminado_por).execute()
        
        if not admin_check.data:
            return f"‚ùå Error: El n√∫mero {eliminado_por} no est√° registrado en el sistema."
        
        admin_data = admin_check.data[0]
        if admin_data.get("type") != "Administrador":
            return f"‚ùå Error: Solo los administradores pueden eliminar usuarios."
        
        if not admin_data.get("status"):
            return f"‚ùå Error: El administrador no est√° activo en el sistema."
        
        # Verificar que el usuario existe
        user_check = supabase.table("users_agent").select(
            "phone, name, type, status"
        ).eq("phone", telefono).execute()
        
        if not user_check.data:
            return f"‚ùå Error: El usuario con tel√©fono {telefono} no existe en el sistema."
        
        user_data = user_check.data[0]
        user_name = user_data.get("name", "Sin nombre")
        user_type = user_data.get("type")
        
        # No permitir eliminar administradores
        if user_type == "Administrador":
            return f"‚ùå Error: No se puede eliminar un usuario administrador."
        
        # Si ya est√° inactivo, no hacer nada
        if not user_data.get("status"):
            return f"‚ÑπÔ∏è El usuario {user_name} ({telefono}) ya est√° eliminado (inactivo)."
        
        # Desactivar el usuario (cambiar status a False)
        supabase.table("users_agent").update({
            "status": False
        }).eq("phone", telefono).execute()
        
        return (
            f"‚úÖ Usuario eliminado exitosamente.\n"
            f"üë§ Nombre: {user_name}\n"
            f"üìû Tel√©fono: {telefono}\n"
            f"üîë Tipo: {user_type}\n"
            f"üìä Estado: Inactivo\n"
            f"üëë Eliminado por: {eliminado_por}\n"
            f"üí¨ El usuario ya no puede interactuar con el agente"
        )
        
    except Exception as e:
        error_msg = f"‚ùå Error al eliminar usuario: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg


