# app/core/tools.py

from langchain.tools import tool
from app.data.questions import question_list
from app.db.respositories import get_db_connection
from app.db.mongo import MongoChatMessageHistory



@tool
def limpiar_memoria(phone: str) -> str:
    """Limpia toda la memoria de conversaci√≥n de un usuario espec√≠fico usando su n√∫mero de tel√©fono. Esta herramienta borra todos los mensajes almacenados en MongoDB para el n√∫mero de tel√©fono proporcionado."""
    try:
        print(f"üßπ Iniciando limpieza de memoria para el tel√©fono: {phone}")
        
        memory = MongoChatMessageHistory(phone=phone)
        
        memory.clear()
        
        print(f"‚úÖ Memoria limpiada exitosamente para el tel√©fono: {phone}")
        return f"Memoria de conversaci√≥n limpiada exitosamente para el n√∫mero {phone}. La conversaci√≥n anterior ha sido borrada."
        
    except Exception as e:
        error_msg = f"Error al limpiar la memoria: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg



@tool
def nombre_cliente(nombre: str = "", offset: int = 0, limit: int = 10) -> str:
    """
    Devuelve una lista de clientes filtrados por nombre (opcional) con paginaci√≥n.

    Args:
        nombre (str): Nombre o parte del nombre del cliente a buscar. Puede estar vac√≠o para traer todos.
        offset (int): Posici√≥n inicial de los resultados (para paginaci√≥n).
        limit (int): N√∫mero m√°ximo de resultados a devolver.

    Returns:
        str: Lista de clientes encontrados con su ID y nombre.
    """
    conn = get_db_connection()
    cursor = conn.cursor()

    query = """
        SELECT DISTINCT
            c.id_client AS id,
            c.full_name AS nombre
        FROM clients c
        WHERE COALESCE(NULLIF(c.full_name, ''), '') <> ''
          AND c.full_name ILIKE %s
        ORDER BY nombre
        OFFSET %s
        LIMIT %s
    """
    
    patron_busqueda = f"%{nombre}%" if nombre else "%%"

    cursor.execute(query, (patron_busqueda, offset, limit))
    resultados = cursor.fetchall()
    conn.close()

    if not resultados:
        return "No se encontraron clientes con los criterios especificados."

    respuesta = []
    for id_cliente, nombre_cliente in resultados:
        respuesta.append(f"üÜî ID: {id_cliente} | üë§ Nombre: {nombre_cliente}")

    return "\n".join(respuesta)


@tool
def nombre_empresa(nombre: str = "", offset: int = 0, limit: int = 10) -> str:
    """
    Devuelve empresas (clients.company) filtradas por nombre con paginaci√≥n.

    Args:
        nombre (str): Parte del nombre de la empresa a buscar. Vac√≠o = todas.
        offset (int): Desplazamiento inicial (paginaci√≥n).
        limit (int): Cantidad de registros a devolver.

    Returns:
        str: Lista de empresas con ID y nombre.
    """
    # (Opcional) l√≠mites sanos para evitar abusos
    if limit <= 0:
        limit = 10
    if limit > 100:
        limit = 100
    if offset < 0:
        offset = 0

    conn = get_db_connection()
    cursor = conn.cursor()

    query = """
        SELECT DISTINCT
            c.id_client AS id,
            c.company   AS nombre
        FROM clients c
        WHERE COALESCE(NULLIF(c.company, ''), '') <> ''
          AND c.company ILIKE %s
        ORDER BY nombre
        OFFSET %s
        LIMIT %s
    """

    patron = f"%{nombre}%" if nombre else "%%"

    cursor.execute(query, (patron, offset, limit))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        return "No se encontraron empresas con los criterios especificados."

    lines = [f"üÜî ID: {rid} | üè¢ Empresa: {rnom}" for rid, rnom in rows]
    return "\n".join(lines)
