# app/core/tools.py

from langchain.tools import tool
from app.data.questions import question_list
from app.db.respositories import get_db_connection
from app.db.mongo import MongoChatMessageHistory



@tool
def limpiar_memoria(phone: str) -> str:
    """Limpia toda la memoria de conversaci√≥n de un usuario espec√≠fico usando su n√∫mero de tel√©fono. Esta herramienta borra todos los mensajes almacenados en MongoDB para el n√∫mero de tel√©fono proporcionado."""
    try:
        print(f"üßπ Iniciando limpieza de memoria para el tel√©fono: {phone}")
        
        memory = MongoChatMessageHistory(phone=phone)
        
        memory.clear()
        
        print(f"‚úÖ Memoria limpiada exitosamente para el tel√©fono: {phone}")
        return f"Memoria de conversaci√≥n limpiada exitosamente para el n√∫mero {phone}. La conversaci√≥n anterior ha sido borrada."
        
    except Exception as e:
        error_msg = f"Error al limpiar la memoria: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg



@tool
def nombre_cliente(nombre: str = "", offset: int = 0, limit: int = 10) -> str:
    """
    Devuelve una lista de clientes filtrados por nombre (opcional) con paginaci√≥n.

    Args:
        nombre (str): Nombre o parte del nombre del cliente a buscar. Puede estar vac√≠o para traer todos.
        offset (int): Posici√≥n inicial de los resultados (para paginaci√≥n).
        limit (int): N√∫mero m√°ximo de resultados a devolver.

    Returns:
        str: Lista de clientes encontrados con su ID y nombre.
    """
    try:
        print(f"üîç Buscando clientes con nombre: '{nombre}'")
        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT DISTINCT
                c.id_client AS id,
                c.full_name AS nombre
            FROM public.clients c
            WHERE COALESCE(NULLIF(c.full_name, ''), '') <> ''
              AND c.full_name ILIKE %s
            ORDER BY nombre
            OFFSET %s
            LIMIT %s
        """
        
        patron_busqueda = f"%{nombre}%" if nombre else "%%"

        cursor.execute(query, (patron_busqueda, offset, limit))
        resultados = cursor.fetchall()
        conn.close()

        if not resultados:
            return "No se encontraron clientes con los criterios especificados."

        respuesta = []
        for id_cliente, nombre_cliente in resultados:
            respuesta.append(f"üÜî ID: {id_cliente} | üë§ Nombre: {nombre_cliente}")

        print(f"‚úÖ Encontrados {len(resultados)} clientes")
        return "\n".join(respuesta)
        
    except Exception as e:
        error_msg = f"Error al consultar clientes: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"


@tool
def nombre_empresa(nombre: str = "", offset: int = 0, limit: int = 10) -> str:
    """
    Devuelve empresas (clients.company) filtradas por nombre con paginaci√≥n.

    Args:
        nombre (str): Parte del nombre de la empresa a buscar. Vac√≠o = todas.
        offset (int): Desplazamiento inicial (paginaci√≥n).
        limit (int): Cantidad de registros a devolver.

    Returns:
        str: Lista de empresas con ID y nombre.
    """
    try:
        print(f"üè¢ Buscando empresas con nombre: '{nombre}'")
        
        # (Opcional) l√≠mites sanos para evitar abusos
        if limit <= 0:
            limit = 10
        if limit > 100:
            limit = 100
        if offset < 0:
            offset = 0

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT DISTINCT
                c.id_client AS id,
                c.company   AS nombre
            FROM public.clients c
            WHERE COALESCE(NULLIF(c.company, ''), '') <> ''
              AND c.company ILIKE %s
            ORDER BY nombre
            OFFSET %s
            LIMIT %s
        """

        patron = f"%{nombre}%" if nombre else "%%"

        cursor.execute(query, (patron, offset, limit))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return "No se encontraron empresas con los criterios especificados."

        lines = [f"üÜî ID: {rid} | üè¢ Empresa: {rnom}" for rid, rnom in rows]
        print(f"‚úÖ Encontradas {len(rows)} empresas")
        return "\n".join(lines)
        
    except Exception as e:
        error_msg = f"Error al consultar empresas: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"


@tool
def planes_pago_pendientes_por_cliente(id_cliente: int) -> str:
    """
    Devuelve los planes de pago con estado 'Pendiente' asociados a un cliente.

    Args:
        id_cliente (int): ID del cliente.

    Returns:
        str: Lista de planes con campos clave o mensaje de no encontrados.
    """
    try:
        if not isinstance(id_cliente, int) or id_cliente <= 0:
            return "El ID de cliente debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                pp.id_payment_plan,
                pp.id_sales_orders,
                pp.num_installments,
                pp.total_amount,
                pp.status,
                pp.pending_amount,
                pp.type_payment_plan
            FROM public.payment_plan pp
            JOIN public.sales_orders so 
                ON so.id_sales_orders = pp.id_sales_orders
            WHERE so.id_client = %s
              AND pp.status = 'Pendiente'
            ORDER BY pp.created_at DESC;
        """

        cursor.execute(query, (id_cliente,))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return f"No se encontraron planes de pago pendientes para el cliente con ID {id_cliente}."

        # Formato de salida
        lines = []
        for rid_plan, rid_order, num_inst, total_amt, status, pending_amt, type_plan in rows:
            lines.append(
                f"üìã Plan: {rid_plan} | üõí Orden: {rid_order} | "
                f"Cuotas: {num_inst} | üí∞ Total: {total_amt} | "
                f"Estado: {status} | ‚è≥ Pendiente: {pending_amt} | "
                f"Tipo: {type_plan}"
            )

        return "\n".join(lines)

    except Exception as e:
        error_msg = f"Error al consultar planes de pago: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"


@tool
def montos_a_favor_por_cliente(id_cliente: int) -> str:
    """
    Devuelve los planes de pago 'Pagado' con monto pendiente mayor a 0,
    es decir, montos a favor de un cliente.

    Args:
        id_cliente (int): ID del cliente.

    Returns:
        str: Lista de planes con montos a favor o mensaje de no encontrados.
    """
    try:
        if not isinstance(id_cliente, int) or id_cliente <= 0:
            return "El ID de cliente debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                pp.id_payment_plan,
                pp.id_sales_orders,
                pp.pending_amount
            FROM public.payment_plan pp
            JOIN public.sales_orders so 
                ON so.id_sales_orders = pp.id_sales_orders
            WHERE so.id_client = %s
              AND pp.status = 'Pagado'
              AND pp.pending_amount > 0
            ORDER BY pp.created_at DESC;
        """

        cursor.execute(query, (id_cliente,))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return f"No se encontraron montos a favor para el cliente con ID {id_cliente}."

        # Formato de salida
        lines = []
        for rid_plan, rid_order, pending_amt in rows:
            lines.append(
                f"üìã Plan: {rid_plan} | üõí Orden: {rid_order} | üíµ Monto a favor: {pending_amt}"
            )

        return "\n".join(lines)

    except Exception as e:
        error_msg = f"Error al consultar montos a favor: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"


@tool
def cuotas_pendientes_por_plan(id_payment_plan: int) -> str:
    """
    Devuelve las cuotas con estado 'Pendiente' de un plan de pago espec√≠fico.

    Args:
        id_payment_plan (int): ID del plan de pago.

    Returns:
        str: Lista de cuotas pendientes con detalles o mensaje de no encontradas.
    """
    try:
        if not isinstance(id_payment_plan, int) or id_payment_plan <= 0:
            return "El ID del plan de pago debe ser un n√∫mero entero positivo."

        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT 
                pi.id_payment_installment,
                pi.installment_number,
                pi.due_date,
                pi.amount,
                pi.pay_amount,
                pi.status,
                pi.daysoverdue,
                pi.early_payment_discount
            FROM public.payment_installment pi
            WHERE pi.id_payment_plan = %s
              AND pi.status = 'Pendiente'
            ORDER BY pi.installment_number ASC;
        """

        cursor.execute(query, (id_payment_plan,))
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return f"No se encontraron cuotas pendientes para el plan {id_payment_plan}."

        # Formateo de salida
        lines = []
        for (
            id_installment, num_installment, due_date, amount, pay_amount,
            status, days_overdue, early_discount
        ) in rows:
            lines.append(
                f"üìå Cuota #{num_installment} | "
                f"üí∞ Total: {amount} | üíµ Pagado: {pay_amount} | "
                f"üìÖ Vence: {due_date} | Estado: {status} | "
                f"D√≠as mora: {days_overdue} | "
                f"Descuento pronto pago: {early_discount}"
            )

        return "\n".join(lines)

    except Exception as e:
        error_msg = f"Error al consultar cuotas pendientes: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"Error al consultar la base de datos: {str(e)}"

import psycopg2

def registrar_pago():
    conn = psycopg2.connect(
        host="localhost",
        database="tu_base",
        user="tu_usuario",
        password="tu_password"
    )
    cursor = conn.cursor()

    # Paso 1: Confirmar id_payment_plan
    id_payment_plan = input("Ingrese el ID del plan de pago: ")

    # Paso 2: Mostrar cuotas asociadas
    cursor.execute("""
        SELECT id_payment_installment, installment_number, pay_amount
        FROM payment_installment
        WHERE id_payment_plan = %s
        ORDER BY installment_number;
    """, (id_payment_plan,))
    cuotas = cursor.fetchall()

    if not cuotas:
        print("No se encontraron cuotas para este plan.")
        conn.close()
        return

    print("\nCuotas del plan:")
    for cuota in cuotas:
        id_pi, num, monto = cuota
        print(f"ID: {id_pi} | Cuota N¬∞ {num} | Monto actual: {monto or 0}")

    # Paso 3: Usuario elige cuota
    id_payment_installment = input("\nIngrese el ID de la cuota a la que desea afiliar el pago: ")

    # Paso 4: Monto del pago
    try:
        amount = float(input("Ingrese el monto a pagar: "))
    except ValueError:
        print("Monto inv√°lido.")
        conn.close()
        return

    # Paso 5: Obtener monto actual y sumarlo
    cursor.execute("""
        SELECT pay_amount
        FROM payment_installment
        WHERE id_payment_installment = %s;
    """, (id_payment_installment,))
    row = cursor.fetchone()
    if not row:
        print("No se encontr√≥ la cuota seleccionada.")
        conn.close()
        return

    pay_amount_actual = float(row[0] or 0)
    nuevo_acumulado = pay_amount_actual + amount

    # Paso 6: Actualizar monto acumulado en la cuota
    cursor.execute("""
        UPDATE payment_installment
        SET pay_amount = %s
        WHERE id_payment_installment = %s;
    """, (nuevo_acumulado, id_payment_installment))

    # Paso 7: Registrar el pago
    cursor.execute("""
        INSERT INTO payments (id_payment_installment, amount)
        VALUES (%s, %s);
    """, (id_payment_installment, amount))

    conn.commit()
    conn.close()
    print(f"\nPago registrado correctamente. Nuevo monto acumulado en la cuota: {nuevo_acumulado}")



