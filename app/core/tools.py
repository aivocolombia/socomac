# app/core/tools.py

from langchain.tools import tool
from app.data.questions import question_list
from app.db.respositories import get_db_connection
from app.db.mongo import MongoChatMessageHistory



@tool
def limpiar_memoria(phone: str) -> str:
    """Limpia toda la memoria de conversaci√≥n de un usuario espec√≠fico usando su n√∫mero de tel√©fono. Esta herramienta borra todos los mensajes almacenados en MongoDB para el n√∫mero de tel√©fono proporcionado."""
    try:
        print(f"üßπ Iniciando limpieza de memoria para el tel√©fono: {phone}")
        
        memory = MongoChatMessageHistory(phone=phone)
        
        memory.clear()
        
        print(f"‚úÖ Memoria limpiada exitosamente para el tel√©fono: {phone}")
        return f"Memoria de conversaci√≥n limpiada exitosamente para el n√∫mero {phone}. La conversaci√≥n anterior ha sido borrada."
        
    except Exception as e:
        error_msg = f"Error al limpiar la memoria: {str(e)}"
        print(f"‚ùå {error_msg}")
        return error_msg

@tool
def validar_cliente(telefono: str) -> str:
    """
    Valida si un cliente existe en la tabla public.clientes usando el tel√©fono.
    
    Args:
        telefono (str): Tel√©fono del cliente a buscar.

    Returns:
        str: Informaci√≥n del cliente si existe o mensaje de no encontrado.
    """
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        cur.execute("""
            SELECT id, nombre, telefono, direccion, created_at
            FROM public.clientes
            WHERE telefono = %s
            LIMIT 1;
        """, (telefono,))
        cliente = cur.fetchone()
        conn.close()

        if cliente:
            return (f"üÜî ID: {cliente[0]} | üë§ {cliente[1]} | üì± {cliente[2]} "
                    f"| üìç {cliente[3] or 'N/A'} | üìÖ Creado: {cliente[4]}")
        else:
            return f"‚ùå No se encontr√≥ cliente con tel√©fono {telefono}."

    except Exception as e:
        return f"‚ùå Error al validar cliente: {str(e)}"


@tool
def insertar_cliente(nombre: str, telefono: str, direccion: str = "") -> str:
    """
    Inserta un cliente en la tabla public.clientes si no existe (usando el tel√©fono como referencia).
    
    Args:
        nombre (str): Nombre del cliente.
        telefono (str): Tel√©fono del cliente (√∫nico).
        direccion (str, opcional): Direcci√≥n del cliente.

    Returns:
        str: Mensaje de confirmaci√≥n o error.
    """
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        cur.execute("""
            SELECT id FROM public.clientes WHERE telefono = %s
        """, (telefono,))
        existe = cur.fetchone()

        if existe:
            conn.close()
            return f"‚ö†Ô∏è El cliente con tel√©fono {telefono} ya existe."

        cur.execute("""
            INSERT INTO public.clientes (nombre, telefono, direccion, updated_at, created_at)
            VALUES (%s, %s, %s, NOW(), NOW())
            RETURNING id, nombre, telefono, direccion;
        """, (nombre, telefono, direccion))
        nuevo = cur.fetchone()
        conn.commit()
        conn.close()

        return f"‚úÖ Cliente creado: ID {nuevo[0]} | {nuevo[1]} ({nuevo[2]})"

    except Exception as e:
        return f"‚ùå Error al insertar cliente: {str(e)}"
